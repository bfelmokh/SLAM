<?xml version="1.0"?>


 <launch>
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      
    
    </include>

<!-- putting robot description file into parameter used by gazebo to spawn -->
   <param name="robot_description" command="$(find xacro)/xacro --inorder 
                                          '$(find drone_sim)/plugins/bodyNsensors.urdf.xacro'" />
   
   <!-- push robot_description to factory and spawn robot in gazebo -->
    <node name="spawn_robot" pkg="gazebo_ros" type="spawn_model"  respawn="false" output="screen"
      args="-urdf -model myquadrotor -param robot_description"/>

     

    <!-- to define odometery for our drone -->
   <node name="ground_truth_to_tf" pkg="message_to_tf" type="message_to_tf" output="screen">
     <param name="odometry_topic" value="ground_truth/state" />
     <param name="frame_id" value="nav" />
   </node>

      <!-- start robot state publisher -->
   <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen" >
     <param name="publish_frequency" type="double" value="50.0" />
     <param name="tf_prefix" type="string" value="" />
   </node>
   <group ns="rtabmap">
          <!-- SLAM (robot side) -->
          <!-- args: "delete_db_on_start" and "udebug" -->
           <arg name="localization" default="false"/>
          <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="delete_db_on_start">
	        <param name="frame_id"           type="string" value="base_link"/>
	        <param name="wait_for_transform" type="bool" value="true"/>
          <!--<param name="map_frame_id" value="map"/>-->
	        <param name="subscribe_depth" type="bool" value="true"/>
	        <param name="subscribe_scan"  type="bool" value="true"/>
	
	            <!-- As /az3/base_controller/odom topic doesn't provide covariances, we use TF to get odom and we fix the covariance -->
	        <param name="odom_frame_id"            type="string" value="nav"/>
	        <param name="odom_tf_linear_variance"  type="double" value="0.001"/>
	        <param name="odom_tf_angular_variance" type="double" value="0.001"/>

	        <remap from="scan" to="/scan"/>

	       <remap from="rgb/image"       to="/ardrone/front/color/image_raw"/>
  	      <remap from="depth/image"     to="/ardrone/front/depth/image_raw"/>
  	      <remap from="rgb/camera_info" to="/ardrone/front/color/camera_info"/>
          <remap from="grid_map" to="map"/>
          <remap from="odom" to="/odom"/>
	
	        <!-- RTAB-Map's parameters: do "rosrun rtabmap rtabmap (double-dash)params" to see the list of available parameters. -->
	        <param name="RGBD/NeighborLinkRefining" type="string" value="true"/>  <!-- Do odometry correction with consecutive laser scans -->
	        <param name="RGBD/ProximityBySpace"     type="string" value="true"/>  <!-- Local loop closure detection (using estimated position) with locations in WM -->
	        <param name="RGBD/ProximityByTime"      type="string" value="false"/> <!-- Local loop closure detection with locations in STM -->
	        <param name="RGBD/ProximityPathMaxNeighbors" type="string" value="10"/> <!-- Do also proximity detection by space by merging close scans together. -->
	        <param name="Reg/Strategy"              type="string" value="1"/>     <!-- 0=Visual, 1=ICP, 2=Visual+ICP -->
	        <param name="Vis/MinInliers"        type="string" value="6"/>   <!-- 3D visual words correspondence distance -->
	        <param name="RGBD/OptimizeFromGraphEnd" type="string" value="false"/> <!-- Optimize graph from initial node so /map -> /odom transform will be generated -->
	        <param name="RGBD/OptimizeMaxError"     type="string" value="3"/>	    <!-- Reject any loop closure causing large errors (>3x link's covariance) in the map -->
	        <param name="Reg/Force3DoF"             type="string" value="true"/>  <!-- 2D SLAM -->
	        <param name="Grid/FromDepth"            type="string" value="true"/> 
          <param name="Grid/3D"            type="string" value="true"/> <!-- Create 2D occupancy grid from laser scan -->
	        <param name="Mem/STMSize"               type="string" value="30"/>    <!-- increased to 30 to avoid adding too many loop closures on just seen locations -->
	        <param name="RGBD/LocalRadius"          type="string" value="5"/>     <!-- limit length of proximity detections -->
	        <param name="Icp/CorrespondenceRatio"   type="string" value="0.4"/>   <!-- minimum scan overlap to accept loop closure -->
	        <param name="database_path" type="string" value="~/.ros/rtabmap.db"/>
          <param name="Kp/MAxDepth" type="string" value="4"/>
          <param name="RGBD/AngularUpdate" type="string" value="0.1"/>
          <param name="RGBD/LinearUpdate" type="string" value="0.1"/>
          <param name="Rtabmap/TimeThr" type="string" value="0"/>
          <param name="Optimizer/Slam2D" type="string" value="true"/>
	        <!-- localization mode--> 
	        <param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
	        <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
	        <param name="Mem/InitWMWithAllNodes" type="string" value="$(arg localization)"/>
          </node>
        </group>
  
  <!-- Visualisation RVIZ -->
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find rtabmap_ros)/launch/config/demo_robot_mapping.rviz" output="screen"/>
   <node pkg="nodelet" type="nodelet" name="points_xyzrgb" args="standalone rtabmap_ros/point_cloud_xyzrgb">
    <remap from="rgb/image"       to="/camera/color/image_raw"/>
      <remap from="depth/image"     to="/camera/depth/image_raw"/>
      <remap from="rgb/camera_info" to="/camera/color/camera_info"/>
    <remap from="cloud"           to="voxel_cloud" />
    
    <!--<param name="rgb/image_transport"   type="string" value="compressed"/>
    <param name="depth/image_transport" type="string" value="compressedDepth"/>-->
    <param name="queue_size" type="int" value="10"/>
    <param name="voxel_size" type="double" value="0.01"/>
  </node>

  
 </launch>
   
